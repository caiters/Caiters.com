extends ../layout

block content
    header.page-header.recent-project--boom
        h1.heading--main.heading.no-b-margin Logitech Ultimate Ears
    div.inner-wrap.text--body.section-padding
        p.text--lead.text--centered myBOOM 3
        a(href="https://studio.ultimateears.com/", target="_blank")
            img.img--centered.margin-bottom-3.img--bordered(src="/images/website-boom.jpg", alt="myBOOM 3 website screenshot")
        p.text--centered
            a.btn.btn--solid(href="https://studio.ultimateears.com/", target="_blank") Website Link

        div.project-body
            ul.project-info
                li.project-info__block
                    strong.project-info__name CMS:
                    | Custom .net MVC admin
                li.project-info__block
                    strong.project-info__name Browser Support:
                    | Modern Browsers
                li.project-info__block
                    strong.project-info__name Type:
                    | Single Page App
            h2.heading.heading--secondary About This Project
            p.
                The goal with this project was to allow customers to customize their own BOOM 3 speakers with different fabric and component color combinations.
                I was the primary front-end developer on this project, with a coworker of mine helping with the Feeling Lucky section to get the first pass at
                randomization completed.
            p.
                This project was built using Vue with Vuex, Vue Router, and Fabric.js. We used Cloudinary for the image uploading and also for handling foreign fonts!
                The client wanted to use their brand font for Roman characters and Noto for all other characters when writing custom text on the spine of the speaker.
                The Noto font with all glyphs would have been an incredibly large download, but luckily Google fonts are available on Cloudinary!

            h2.heading.heading--secondary Lessons Learned
            ul
                li.
                    Apparently you can't animate clip-path over a canvas element in the latest version of Safari. That was a super fun bug to track down!
                    Ultimately I ended up with a codepen with the most simple version of the issue I could think of - animating a clip path that happened to
                    have a tiny canvas inside the area that was animating. Unfortunately, at least from my testing I wasn't able to find a good way to detect
                    whether this issue was occuring or not - the browser definitely "thinks" the animation is occurring, as the animationend event still fires.
                    Super weird!